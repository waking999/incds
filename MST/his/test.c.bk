/*
 * test.c
 *
 *  Created on: 16/03/2014
 *      Author: Administrator
 */

#include <stdio.h>
#define MAX 999
#define GET_ARRAY_LEN(array,n){n=sizeof(array)/sizeof(array[0]);}
#define EMPTY_ELEMENT -1
void getEdges(int *am, int *edges, int vSize);
/**
 * make use of bubble sort weights of edges and index of edges
 */
void bubble(int *edgeWeights, int *edgeIdx, int n) {
	int i, j, temp;

	for (i = 0; i < n - 1; i++)
		for (j = i + 1; j < n; j++)
			if (edgeWeights[i] > edgeWeights[j]) {
				temp = edgeWeights[i];
				edgeWeights[i] = edgeWeights[j];
				edgeWeights[j] = temp;

				edgeIdx[i] = j;
				edgeIdx[j] = i;
			}
}

//void delArrayEle(int *a, int n, int x) {
//	int i, j;
//	for (i = 0; i < n; i++) {
//		if (a[i] == x) {
//			break;
//		}
//
//	}
//	for (j = i; j < n; j++) {
//		a[j] = a[j + 1];
//	}
//
//}

void delArrayEleAtPositionI(int *a,  int i) {

	a[i]=EMPTY_ELEMENT;

}
int arrayLen(int array[], int n) {
	int i = 0;
	int counter = 0;

	for (i = 0; i < n; i++) {

		if (array[i] != EMPTY_ELEMENT) {
			counter++;
		}
	}
	return counter;
}
void krushal(int *edgeWeight, int *edgeIdx, int vSize) {
	int tree[vSize];
	int maxEdgeSize = vSize * vSize;
	int i;
	for (i = 0; i < vSize; i++) {
		tree[i] = EMPTY_ELEMENT;
	}

	int treeLen = arrayLen(tree,vSize);
	int edgeLen = arrayLen(edgeWeight,maxEdgeSize);


	//printf("%d %d,\t", treeLen, edgeLen);

	i=0;
	while(treeLen<vSize)&&(edgeLen>0){
		int tmpEdge = edgeIdx[i]+1;
		int u= tmpEdge/vSize;
		int v= tmpEdge%vSize;
		int j=0;
		for(j=0;j<treeLen;j++){
			int tmpTEdge = tree[j]+1;
			int tmpU=tmpTEdge/vSize;
			int tmpV=tmpTEdge%vSize;
			if(u)
		}
	}
//	for(i=0;i<vSize*vSize;i++){
//		delArrayEleAtPositionI(edgeWeight);
//		delArrayEleAtPositionI(edgeIdx);
//		if()
//	}


}

void test() {
	int vSize = 10;
	int adj_mtrx[10][10] = { { 0, 4, 0, 3, 0, 0, 0, 0, 0, 0 }, { 4, 0, 2, 5, 4,
			0, 0, 0, 0, 0 }, { 0, 2, 0, 0, 3, 0, 0, 4, 0, 0 }, { 3, 5, 0, 0, 4,
			3, 3, 0, 0, 0 }, { 0, 4, 3, 4, 0, 0, 4, 2, 0, 0 }, { 5, 0, 0, 3, 0,
			0, 2, 0, 3, 0 }, { 0, 0, 0, 3, 4, 2, 0, 3, 0, 3 }, { 0, 0, 4, 0, 2,
			0, 3, 0, 3, 4 }, { 0, 0, 0, 0, 0, 3, 0, 3, 0, 2 }, { 0, 0, 0, 0, 0,
			0, 3, 4, 2, 0 } };

	int maxEdgeSize = vSize * vSize;

	int * edgeWeight = calloc(maxEdgeSize, sizeof(int));

	getEdges(adj_mtrx, edgeWeight, vSize);

	int * edgeIdx = calloc(maxEdgeSize, sizeof(int));
	int i = 0;
	for (i = 0; i < maxEdgeSize; i++) {
		edgeIdx[i] = i;
	}

	bubble(edgeWeight, edgeIdx, maxEdgeSize);

	krushal(edgeWeight, edgeIdx, vSize);

//	for (i = 0; i < vSize * vSize; i++) {
//		if (i % vSize == 0) {
//			printf("\n");
//		}
//		printf("%4d", *(edges + i));
//	}
//
//	for (i = 0; i < vSize * vSize; i++) {
//		if (i % vSize == 0) {
//			printf("\n");
//		}
//		printf("%4d", *(edgeIdx + i));
//	}

	free(edgeWeight);
	free(edgeIdx);
	return;

//	int *p;
//	for (p = adj_mtrx[0]; p < adj_mtrx[0] + vSize*vSize; p++) {
//		if ((p - adj_mtrx[0]) % vSize == 0)
//			printf("\n");
//		printf("%4d", *p);
//	}
}
/**
 * get edges from adjacent matrix of a graph
 */
void getEdges(int *am, int *edges, int vSize) {

	int i, j;
	for (i = 0; i < vSize; i++) {
		for (j = 0; j < vSize; j++) {
			int index = i * vSize + j;
			if (*(am + index) == 0) {
				edges[index] = MAX;
			} else {
				edges[index] = *(am + index);
			}
		}
	}

	return;
}

int main() {

	test();
	return 0;
}

